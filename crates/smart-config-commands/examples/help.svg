<!-- Created with term-transcript v0.4.0-beta.1 (https://github.com/slowli/term-transcript) -->
<svg viewBox="0 -22 860 582" width="860" height="582" xmlns="http://www.w3.org/2000/svg">
  <style>
    .container {
      font: 14px SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;
      line-height: 18px;
    }
    .input,.output,.output-bg {
      white-space: pre;
    }
    .input-bg { fill: #fff; fill-opacity: 0.1; }
    .output-bg { user-select: none; text-rendering: geometricPrecision; stroke-width: 0.1; }
    .scrollbar { fill: #fff; fill-opacity: 0.35; }
    .line-numbers { text-anchor: end; fill-opacity: 0.35; user-select: none; }

    .bold,.prompt { font-weight: 600; }
    .italic { font-style: italic; }
    .underline { text-decoration: underline; }
    .dimmed { fill-opacity: 0.7; }
    .fg0 { fill: #1c1c1c; } .output-bg .fg0 { stroke: #1c1c1c; }
    .fg1 { fill: #ff005b; } .output-bg .fg1 { stroke: #ff005b; }
    .fg2 { fill: #cee318; } .output-bg .fg2 { stroke: #cee318; }
    .fg3 { fill: #ffe755; } .output-bg .fg3 { stroke: #ffe755; }
    .fg4 { fill: #048ac7; } .output-bg .fg4 { stroke: #048ac7; }
    .fg5 { fill: #833c9f; } .output-bg .fg5 { stroke: #833c9f; }
    .fg6 { fill: #0ac1cd; } .output-bg .fg6 { stroke: #0ac1cd; }
    .fg7 { fill: #e5e5e5; } .output-bg .fg7 { stroke: #e5e5e5; }
    .fg8 { fill: #666666; } .output-bg .fg8 { stroke: #666666; }
    .fg9 { fill: #ff00a0; } .output-bg .fg9 { stroke: #ff00a0; }
    .fg10 { fill: #ccff00; } .output-bg .fg10 { stroke: #ccff00; }
    .fg11 { fill: #ff9f00; } .output-bg .fg11 { stroke: #ff9f00; }
    .fg12 { fill: #48c6ff; } .output-bg .fg12 { stroke: #48c6ff; }
    .fg13 { fill: #be67e1; } .output-bg .fg13 { stroke: #be67e1; }
    .fg14 { fill: #63e7f0; } .output-bg .fg14 { stroke: #63e7f0; }
    .fg15 { fill: #f3f3f3; } .output-bg .fg15 { stroke: #f3f3f3; }
  </style>
  <rect width="100%" height="100%" y="-22" rx="4.5" style="fill: #1c1c1c;" />
  <rect width="100%" height="26" y="-22" clip-path="inset(0 0 -10 0 round 4.5)" style="fill: #fff; fill-opacity: 0.1;"/>
  <circle cx="17" cy="-9" r="7" style="fill: #ff005b;"/>
  <circle cx="37" cy="-9" r="7" style="fill: #ffe755;"/>
  <circle cx="57" cy="-9" r="7" style="fill: #cee318;"/>
    <svg x="0" y="10" width="860" height="540" viewBox="0 0 860 540">
      <animate attributeName="viewBox" values="0 0 860 540;0 72 860 540;0 144 860 540;0 216 860 540;0 288 860 540;0 360 860 540;0 432 860 540" dur="24.0s" repeatCount="indefinite" calcMode="discrete" />
      <g class="input-bg"></g>
      <text class="container fg7 line-numbers"><tspan x="34" y="14">1</tspan><tspan x="34" y="32">2</tspan><tspan x="34" y="50">3</tspan><tspan x="34" y="68">4</tspan><tspan x="34" y="86">5</tspan><tspan x="34" y="104">6</tspan><tspan x="34" y="122">7</tspan><tspan x="34" y="140">8</tspan><tspan x="34" y="158">9</tspan><tspan x="34" y="176">10</tspan><tspan x="34" y="194">11</tspan><tspan x="34" y="212">12</tspan><tspan x="34" y="230">13</tspan><tspan x="34" y="248">14</tspan><tspan x="34" y="266">15</tspan><tspan x="34" y="284">16</tspan><tspan x="34" y="302">17</tspan><tspan x="34" y="320">18</tspan><tspan x="34" y="338">19</tspan><tspan x="34" y="356">20</tspan><tspan x="34" y="374">21</tspan><tspan x="34" y="392">22</tspan><tspan x="34" y="410">23</tspan><tspan x="34" y="428">24</tspan><tspan x="34" y="446">25</tspan><tspan x="34" y="464">26</tspan><tspan x="34" y="482">27</tspan><tspan x="34" y="500">28</tspan><tspan x="34" y="518">29</tspan><tspan x="34" y="536">30</tspan><tspan x="34" y="554">31</tspan><tspan x="34" y="572">32</tspan><tspan x="34" y="590">33</tspan><tspan x="34" y="608">34</tspan><tspan x="34" y="626">35</tspan><tspan x="34" y="644">36</tspan><tspan x="34" y="662">37</tspan><tspan x="34" y="680">38</tspan><tspan x="34" y="698">39</tspan><tspan x="34" y="716">40</tspan><tspan x="34" y="734">41</tspan><tspan x="34" y="752">42</tspan><tspan x="34" y="770">43</tspan><tspan x="34" y="788">44</tspan><tspan x="34" y="806">45</tspan><tspan x="34" y="824">46</tspan><tspan x="34" y="842">47</tspan><tspan x="34" y="860">48</tspan><tspan x="34" y="878">49</tspan><tspan x="34" y="896">50</tspan><tspan x="34" y="914">51</tspan><tspan x="34" y="932">52</tspan><tspan x="34" y="950">53</tspan><tspan x="34" y="968">54</tspan></text>
      <text class="container fg7"><tspan xml:space="preserve" x="42" y="14" class="output">
</tspan><tspan xml:space="preserve" x="42" y="32" class="output">
</tspan><tspan xml:space="preserve" x="42" y="50" class="output"><tspan class="dimmed">test.nested.</tspan><tspan class="bold">exit_on_error</tspan>
</tspan><tspan xml:space="preserve" x="42" y="68" class="output">  <tspan class="underline">Type</tspan>: Boolean <tspan class="dimmed">[Rust: bool]</tspan>
</tspan><tspan xml:space="preserve" x="42" y="86" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">true</tspan>
</tspan><tspan xml:space="preserve" x="42" y="104" class="output">  Whether to exit the application on error.
</tspan><tspan xml:space="preserve" x="42" y="122" class="output">
</tspan><tspan xml:space="preserve" x="42" y="140" class="output"><tspan class="dimmed">test.nested.</tspan><tspan class="bold">complex</tspan>
</tspan><tspan xml:space="preserve" x="42" y="158" class="output">  <tspan class="underline">Type</tspan>: object <tspan class="dimmed">[Rust: ComplexParam]</tspan>
</tspan><tspan xml:space="preserve" x="42" y="176" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">ComplexParam { array: [], map: {} }</tspan>
</tspan><tspan xml:space="preserve" x="42" y="194" class="output">  Complex parameter deserialized from an object.
</tspan><tspan xml:space="preserve" x="42" y="212" class="output">
</tspan><tspan xml:space="preserve" x="42" y="230" class="output"><tspan class="dimmed">test.nested.</tspan><tspan class="bold">more_timeouts</tspan>
</tspan><tspan xml:space="preserve" x="42" y="248" class="output"><tspan class="dimmed">test.nested.</tspan>timeouts
</tspan><tspan xml:space="preserve" x="42" y="266" class="output">  <tspan class="underline">Type</tspan>: string | array <tspan class="dimmed">[Rust: Vec]</tspan>; using "," delimiter
</tspan><tspan xml:space="preserve" x="42" y="284" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">[]</tspan>
</tspan><tspan xml:space="preserve" x="42" y="302" class="output">
</tspan><tspan xml:space="preserve" x="42" y="320" class="output">Configuration with type params of several types.
</tspan><tspan xml:space="preserve" x="42" y="338" class="output">
</tspan><tspan xml:space="preserve" x="42" y="356" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">port</tspan>
</tspan><tspan xml:space="preserve" x="42" y="374" class="output"><tspan class="dimmed">test.</tspan>bind_to
</tspan><tspan xml:space="preserve" x="42" y="392" class="output">  <tspan class="underline">Type</tspan>: integer <tspan class="dimmed">[Rust: u16]</tspan>
</tspan><tspan xml:space="preserve" x="42" y="410" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">8080</tspan>
</tspan><tspan xml:space="preserve" x="42" y="428" class="output">  Port to bind to.
</tspan><tspan xml:space="preserve" x="42" y="446" class="output">
</tspan><tspan xml:space="preserve" x="42" y="464" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">app_name</tspan>
</tspan><tspan xml:space="preserve" x="42" y="482" class="output">  <tspan class="underline">Type</tspan>: string <tspan class="dimmed">[Rust: String]</tspan>
</tspan><tspan xml:space="preserve" x="42" y="500" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">"app"</tspan>
</tspan><tspan xml:space="preserve" x="42" y="518" class="output">  Application name.
</tspan><tspan xml:space="preserve" x="42" y="536" class="output">
</tspan><tspan xml:space="preserve" x="42" y="554" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">poll_latency</tspan>
</tspan><tspan xml:space="preserve" x="42" y="572" class="output">  <tspan class="underline">Type</tspan>: string | object <tspan class="dimmed">[Rust: Duration]</tspan>; duration with unit, or object with single unit key
</tspan><tspan xml:space="preserve" x="42" y="590" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">500ms</tspan>
</tspan><tspan xml:space="preserve" x="42" y="608" class="output">
</tspan><tspan xml:space="preserve" x="42" y="626" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">scaling_factor</tspan>
</tspan><tspan xml:space="preserve" x="42" y="644" class="output">  <tspan class="underline">Type</tspan>: integer | float <tspan class="dimmed">[Rust: Option]</tspan>
</tspan><tspan xml:space="preserve" x="42" y="662" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">None</tspan>
</tspan><tspan xml:space="preserve" x="42" y="680" class="output">  Should be greater than 0.
</tspan><tspan xml:space="preserve" x="42" y="698" class="output">
</tspan><tspan xml:space="preserve" x="42" y="716" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">dir_paths</tspan>
</tspan><tspan xml:space="preserve" x="42" y="734" class="output"><tspan class="dimmed">test.</tspan>dirs
</tspan><tspan xml:space="preserve" x="42" y="752" class="output">  <tspan class="underline">Type</tspan>: string | array <tspan class="dimmed">[Rust: HashSet]</tspan>; using ":" delimiter
</tspan><tspan xml:space="preserve" x="42" y="770" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">{}</tspan>
</tspan><tspan xml:space="preserve" x="42" y="788" class="output">  Paths to key directories.
</tspan><tspan xml:space="preserve" x="42" y="806" class="output">
</tspan><tspan xml:space="preserve" x="42" y="824" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">timeout_sec</tspan>
</tspan><tspan xml:space="preserve" x="42" y="842" class="output">  <tspan class="underline">Type</tspan>: integer <tspan class="dimmed">[Rust: Duration]</tspan>; time duration; unit: <tspan class="fg6">seconds</tspan>
</tspan><tspan xml:space="preserve" x="42" y="860" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">60s</tspan>
</tspan><tspan xml:space="preserve" x="42" y="878" class="output">  Timeout for some operation.
</tspan><tspan xml:space="preserve" x="42" y="896" class="output">
</tspan><tspan xml:space="preserve" x="42" y="914" class="output"><tspan class="dimmed">test.</tspan><tspan class="bold">cache_size</tspan>
</tspan><tspan xml:space="preserve" x="42" y="932" class="output">  <tspan class="underline">Type</tspan>: string | object <tspan class="dimmed">[Rust: ByteSize]</tspan>; size with unit, or object with single unit key
</tspan><tspan xml:space="preserve" x="42" y="950" class="output">  <tspan class="underline">Default</tspan>: <tspan class="fg2">16 MiB</tspan>
</tspan><tspan xml:space="preserve" x="42" y="968" class="output">  In-memory cache size.
</tspan></text>
    </svg>
  <rect class="scrollbar" x="853" y="10" width="5" height="40">
    <animateTransform attributeName="transform" attributeType="XML" type="translate" values="0 0;0 83;0 166;0 250;0 333;0 416;0 500" dur="24.0s" repeatCount="indefinite" calcMode="discrete" />
  </rect>
</svg>
